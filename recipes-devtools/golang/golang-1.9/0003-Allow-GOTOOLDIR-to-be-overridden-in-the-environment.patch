From f26c40439c27d4c511463264c2c78385ea39311c Mon Sep 17 00:00:00 2001
From: Matt Madison <matt@madison.systems>
Date: Sun, 15 Jan 2017 05:20:28 -0800
Subject: [PATCH 3/5] Allow GOTOOLDIR to be overridden in the environment

For OE cross-builds, tools are in the build host's GOROOT, not
the target GOROOT.  Allow GOTOOLDIR to be taken from the environment,
rather than being computed from the target GOROOT, so the correct
tools can be found.

Upstream-Status: Pending
Signed-off-by: Matt Madison <matt@madison.systems>
---
 src/cmd/go/internal/cfg/cfg.go    | 7 ++++++-
 src/cmd/go/internal/work/build.go | 2 +-
 src/go/build/build.go             | 2 +-
 src/make.bash                     | 3 ++-
 4 files changed, 10 insertions(+), 4 deletions(-)

diff --git a/src/cmd/go/internal/cfg/cfg.go b/src/cmd/go/internal/cfg/cfg.go
index b3ad1ce..c1dc974 100644
--- a/src/cmd/go/internal/cfg/cfg.go
+++ b/src/cmd/go/internal/cfg/cfg.go
@@ -91,7 +91,12 @@ func init() {
 	// as the tool directory does not move based on environment variables.
 	// This matches the initialization of ToolDir in go/build,
 	// except for using GOROOT rather than runtime.GOROOT().
-	build.ToolDir = filepath.Join(GOROOT, "pkg/tool/"+runtime.GOOS+"_"+runtime.GOARCH)
+	s := os.Getenv("GOTOOLDIR")
+	if s == "" {
+		build.ToolDir = filepath.Join(GOROOT, "pkg/tool/"+runtime.GOOS+"_"+runtime.GOARCH)
+	} else {
+		build.ToolDir = s
+	}
 }
 
 func findGOROOT() string {
diff --git a/src/cmd/go/internal/work/build.go b/src/cmd/go/internal/work/build.go
index 7a44232..cf6113d 100644
--- a/src/cmd/go/internal/work/build.go
+++ b/src/cmd/go/internal/work/build.go
@@ -1337,7 +1337,7 @@ func (b *Builder) build(a *Action) (err error) {
 		}
 
 		var cgoExe string
-		if a.cgo != nil && a.cgo.Target != "" {
+		if a.cgo != nil && a.cgo.Target != "" && os.Getenv("GOTOOLDIR") == "" {
 			cgoExe = a.cgo.Target
 		} else {
 			cgoExe = base.Tool("cgo")
diff --git a/src/go/build/build.go b/src/go/build/build.go
index fd89871..e16145b 100644
--- a/src/go/build/build.go
+++ b/src/go/build/build.go
@@ -1588,7 +1588,7 @@ func init() {
 }
 
 // ToolDir is the directory containing build tools.
-var ToolDir = filepath.Join(runtime.GOROOT(), "pkg/tool/"+runtime.GOOS+"_"+runtime.GOARCH)
+var ToolDir = envOr("GOTOOLDIR", filepath.Join(runtime.GOROOT(), "pkg/tool/"+runtime.GOOS+"_"+runtime.GOARCH))
 
 // IsLocalImport reports whether the import path is
 // a local import path, like ".", "..", "./foo", or "../foo".
diff --git a/src/make.bash b/src/make.bash
index 9553623..2e6fb05 100755
--- a/src/make.bash
+++ b/src/make.bash
@@ -172,10 +172,11 @@ if [ "$do_host_build" = "yes" ]; then
 	mv cmd/dist/dist "$GOTOOLDIR"/dist
 	echo
 
+	GOTOOLDIR_BOOTSTRAP="${GOTOOLDIR_BOOTSTRAP:-$GOTOOLDIR}"
 	echo "##### Building packages and commands for host, $GOHOSTOS/$GOHOSTARCH."
 	# CC_FOR_TARGET is recorded as the default compiler for the go tool. When building for the host, however,
 	# use the host compiler, CC, from `cmd/dist/dist env` instead.
-	CC=$CC GOOS=$GOHOSTOS GOARCH=$GOHOSTARCH \
+	CC=$CC GOOS=$GOHOSTOS GOARCH=$GOHOSTARCH GOTOOLDIR="$GOTOOLDIR_BOOTSTRAP" \
 		"$GOTOOLDIR"/go_bootstrap install -gcflags "$GO_GCFLAGS" -ldflags "$GO_LDFLAGS" -v std cmd
 	echo
 fi
-- 
2.7.4

